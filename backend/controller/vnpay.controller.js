const vnpayConfig = require('../config/vnpay');
const Invoice = require('../model/entity/invoice.schema');
const moment = require('moment');
const querystring = require('querystring');

// H√†m sinh c√°c tham s·ªë thanh to√°n
const generatePaymentParams = (options = {}) => {
  const {
    amount = 23800000,
    orderInfo = 'Thanh to√°n ƒë∆°n h√†ng SkyBooks',
    returnUrl = 'http://localhost:3000/payment-result',
    txnRef = null
  } = options;

  const ipAddr = '127.0.0.1';
  const createDate = moment().format('YYYYMMDDHHmmss');
  const expireDate = moment().add(15, 'minutes').format('YYYYMMDDHHmmss');

  const params = {
    vnp_Version: '2.0.0',
    vnp_Command: 'pay',
    vnp_TmnCode: vnpayConfig.tmnCode,
    vnp_Amount: amount,
    vnp_CurrCode: 'VND',
    vnp_TxnRef: txnRef || moment().format('HHmmss'),
    vnp_OrderInfo: orderInfo,
    vnp_OrderType: 'other',
    vnp_Locale: 'vn',
    vnp_BankCode: 'NCB',
    vnp_ReturnUrl: returnUrl,
    vnp_IpAddr: ipAddr,
    vnp_CreateDate: createDate,
    vnp_ExpireDate: expireDate
  };

  // T·∫°o ch·ªØ k√Ω
  const secureHash = vnpayConfig.createSignature(params);
  
  // Th√™m ch·ªØ k√Ω v√†o params
  params.vnp_SecureHash = secureHash;
  params.vnp_SecureHashType = 'SHA512';

  return params;
};

exports.createPayment = async (req, res) => {
  try {
    const { amount, orderInfo, invoiceId } = req.body;
    
    // Ki·ªÉm tra v√† x·ª≠ l√Ω d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!amount || !orderInfo) {
      return res.status(400).json({ 
        message: 'Thi·∫øu th√¥ng tin thanh to√°n' 
      });
    }

    // T·∫°o m√£ giao d·ªãch duy nh·∫•t
    const txnRef = invoiceId 
      ? `${invoiceId.toString()}${moment().format('HHmmss')}` 
      : `SKYBOOK${moment().format('YYMMDDHHmmss')}`;

    const paymentParams = generatePaymentParams({
      amount: Math.round(parseFloat(amount) * 100),
      orderInfo,
      txnRef: txnRef
    });

    const paymentUrl = `${vnpayConfig.vnpUrl}?${querystring.stringify(paymentParams)}`;

    res.status(200).json({ 
      paymentUrl,
      txnRef,
      invoiceId: invoiceId || null
    });
  } catch (error) {
    console.error('L·ªói t·∫°o thanh to√°n:', error);
    res.status(500).json({ 
      message: 'Kh√¥ng th·ªÉ t·∫°o ƒë∆∞·ªùng d·∫´n thanh to√°n',
      error: error.message 
    });
  }
};

exports.vnpayReturn = async (req, res) => {
  try {
    // Log to√†n b·ªô query params ƒë·ªÉ ki·ªÉm tra
    console.log('üîç VNPay Return Params:', req.query);

    // Ki·ªÉm tra v√† x·ª≠ l√Ω an to√†n
    const { 
      vnp_TxnRef, 
      vnp_ResponseCode,
      vnp_Amount,
      vnp_BankCode,
      vnp_PayDate
    } = req.query || {};

    // Ki·ªÉm tra tham s·ªë b·∫Øt bu·ªôc
    if (!vnp_TxnRef) {
      return res.status(400).json({
        status: 'Th·∫•t b·∫°i',
        message: 'Thi·∫øu m√£ giao d·ªãch'
      });
    }

    // Tr√≠ch xu·∫•t ID ƒë∆°n h√†ng g·ªëc (lo·∫°i b·ªè ph·∫ßn timestamp)
    const originalInvoiceId = vnp_TxnRef.slice(0, -6);
    console.log('originalInvoiceId', originalInvoiceId)

    // Ki·ªÉm tra ch·ªØ k√Ω VNPay
    const isValidSignature = vnpayConfig.verifySignature(req.query);
    if (!isValidSignature) {
      return res.status(400).json({
        status: 'Th·∫•t b·∫°i',
        message: 'Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá'
      });
    }

    // Ki·ªÉm tra m√£ ph·∫£n h·ªìi
    if (vnp_ResponseCode !== '00') {
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng n·∫øu thanh to√°n th·∫•t b·∫°i
      await Invoice.findOneAndUpdate(
        { _id: originalInvoiceId }, 
        {
          payment_status: 'Thanh to√°n th·∫•t b·∫°i',
          payment_method: 'VNPAY'
        }
      );

      return res.status(400).json({
        status: 'Th·∫•t b·∫°i',
        message: `Thanh to√°n kh√¥ng th√†nh c√¥ng. M√£ l·ªói: ${vnp_ResponseCode}`
      });
    }

    // T√¨m v√† c·∫≠p nh·∫≠t ƒë∆°n h√†ng
    const invoice = await Invoice.findOneAndUpdate(
      { _id: originalInvoiceId },
      {
        payment_status: 'ƒê√£ thanh to√°n',
        payment_method: 'VNPAY',
        bank_info: {
          bank_code: vnp_BankCode,
          transaction_date: vnp_PayDate 
            ? moment(vnp_PayDate, 'YYYYMMDDHHmmss').toDate()
            : new Date()
        }
      },
      { new: true }
    );

    // Ki·ªÉm tra n·∫øu kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng
    if (!invoice) {
      return res.status(404).json({
        status: 'Th·∫•t b·∫°i',
        message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'
      });
    }

    return res.status(200).json({
      status: 'Th√†nh c√¥ng',
      message: 'Thanh to√°n th√†nh c√¥ng',
      transactionInfo: {
        invoiceId: invoice._id,
        amount: invoice.total_amount,
        paymentMethod: 'VNPAY'
      }
    });

  } catch (error) {
    console.error('‚ùå L·ªói x·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n:', error);
    
    return res.status(500).json({
      status: 'Th·∫•t b·∫°i',
      message: 'L·ªói h·ªá th·ªëng khi x·ª≠ l√Ω thanh to√°n',
      error: error.message
    });
  }
};

exports.checkPaymentStatus = async (req, res) => {
  try {
    const { transactionRef } = req.query;

    if (!transactionRef) {
      return res.status(400).json({
        status: 'Th·∫•t b·∫°i',
        message: 'Thi·∫øu m√£ giao d·ªãch'
      });
    }

    // T√¨m h√≥a ƒë∆°n theo m√£ giao d·ªãch
    const invoice = await Invoice.findOne({ 
      orderCode: transactionRef 
    });

    if (!invoice) {
      return res.status(404).json({
        status: 'Kh√¥ng t√¨m th·∫•y',
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin giao d·ªãch'
      });
    }

    return res.status(200).json({
      status: invoice.paymentStatus || 'Ch∆∞a x√°c ƒë·ªãnh',
      transactionInfo: {
        orderCode: invoice.orderCode,
        totalAmount: invoice.totalAmount,
        paymentMethod: invoice.paymentMethod,
        transactionDate: invoice.transactionDate
      }
    });

  } catch (error) {
    console.error('‚ùå L·ªói ki·ªÉm tra tr·∫°ng th√°i thanh to√°n:', error);
    
    return res.status(500).json({
      status: 'Th·∫•t b·∫°i',
      message: 'L·ªói h·ªá th·ªëng khi ki·ªÉm tra tr·∫°ng th√°i thanh to√°n',
      error: error.message
    });
  }
}; 